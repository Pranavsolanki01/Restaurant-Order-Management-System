server:
  port: 8083
  servlet:
    context-path: /api

spring:
  application:
    name: order-service

  datasource:
    url: jdbc:mysql://100.85.205.36:3306/rmsdb?createDatabaseIfNotExist=true
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        "[format_sql]": true

  kafka:
    bootstrap-servers: 100.85.205.36:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "[spring.json.add.type.headers]": false
        # "[spring.json.type.mapping]": orderEvent:com.restaurant.order.dto.OrderEventDTO
    # consumer:
    #   group-id: order-service-group
    #   key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    #   value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    #   properties:
    #     "[spring.json.type.mapping]": orderEvent:com.restaurant.order.dto.OrderEventDTO
    #     "[spring.json.trusted.packages]": "*"

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}
  issuer: ${JWT_ISSUER:restaurant-auth-service}
  validate-issuer: ${JWT_VALIDATE_ISSUER:false} # Add this line

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging
logging:
  level:
    "[com.restaurant.order]": DEBUG
    "[org.springframework.security]": DEBUG
    "[org.springframework.kafka]": INFO

# API Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

# Application Information
info:
  app:
    name: Order Service API
    description: Restaurant Order Management System - Order Service
    version: 1.0.0
